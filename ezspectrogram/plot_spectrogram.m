function plot_spectrogram(T, F, ps, units, mode, clims, ax)

%{
% Utility function to plot a spectrogram generated by ``ezspectrogram``
% 
% :param matrix T: First output of ``ezspectrogram``
% :param matrix F: Second output of ``ezspectrogram``
% :param matrix ps: Third output of ``ezspectrogram``
% :param str units: Fourth output of ``ezspectrogram``
% :param str mode: (Optional) 'imagesc' (default) vs. 'surf'. If surf,
%                  spectrogram is plotted as a 3D surface. This is much
%                  more computationally intensive.
% :param array clims: (Optional) 1x2 array with the limits for the colorbar
% :param axes ax: (Optional) Axes where to plot data. If not provided, a
%                 new figure is created
% 
% Usage Example
% -------------
% >> [T, F, ps, units] = myspectrogram(samples, fs);
% >> plot_spectrogram(T, F, ps, units);
% 
% Author: Marc Sanchez Net
% Date:   03/31/2020
% Copyright (c) 2020, Marc Sanchez Net
%}

% Set default mode to imagesc
if ~isArg('mode'), mode = 'imagesc'; end
if ~isArg('ax'), ax = []; end
if ~isArg('clims'), clims = prctile(ps(:), [20 100]); end

% Prepare figure
if isempty(ax)
    figure;
else
    axes(ax);
end

% Plot as a 2D image
if strcmpi(mode, 'imagesc') 
    imagesc(T(1,:), F(:,1), ps);
    set(gca, 'YDir', 'normal');
elseif strcmpi(mode, 'surf')
    % Otherwise plot as 3D surf
    surf(T, F, ps, 'EdgeColor', 'none');
    view([0 90]);
else
    error('Mode %s is not valid', mode);
end

% Create colorbar
hbar = colorbar;
caxis(clims);

% Add labels
xlabel('Time [sec]')
ylabel('Frequency [Hz]');
ylabel(hbar, units);